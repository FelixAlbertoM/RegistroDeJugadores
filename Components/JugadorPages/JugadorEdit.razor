@page "/Jugador/Edit/{JugadorId:int}"

@inject JugadoresService jugadorService
@inject NavigationManager navigationManager
@inject ToastService toastService

@*HTML*@
<PageTitle>Modificar</PageTitle>
<EditForm Model="Jugador" OnValidSubmit="Modificar">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Jugador</h5>
            </div>
            
            <div class="card-body">
                @*Jugador*@
                <div class="mb-3">
                    <label class ="form-label"><strong>Jugador</strong></label>
                    <InputSelect class="form-control" @bind-Value="Jugador.JugadorId">
                        <option value="" selected disabled> Elija una opción</option>
                        @foreach (var jugador in ListaJugadores)
                        {
                            <option value="@jugador.JugadorId">@jugador.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => Jugador.JugadorId)" />
                </div>
                @*Partidas*@
                <div class="mb-3">
                    <label class="form-label"><strong>Partidas</strong></label>
                    <InputNumber class="form-control" @bind-Value="Jugador.Partidas"></InputNumber>
                    <ValidationMessage For="(() => Jugador.Partidas)" />
                </div>
                
                @*footer*@
                <div class="card-footer text-center mt-2">
                    <a href="/Jugador/Index" class="btn btn-secondary">
                        <span class="bi bi-arrow-left"></span> Volver
                    </a>
                    <button type="submit" class="btn btn-primary bi bi-floppy" @onclick="Modificar"> Modificar</button>
                    <button tye="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar"> Eliminar</button>
                </div>

            </div>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int JugadorId { get; set; }

    public Jugadores Jugador { get; set; } = new Jugadores();
    public string Message { get; set; } = string.Empty;
    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

    protected override async Task OnInitializedAsync()
    {
        Jugador = await jugadorService.Buscar(JugadorId);
        ListaJugadores = await jugadorService.Listar(j => j.JugadorId > 0);
    }

    public async Task Modificar()
    {
        var creado = await jugadorService.Guardar(Jugador);
        if (creado)
        {
            toastService.ShowSuccess(" Se ha modificado con exito");
        }
        else
        {
            toastService.ShowError(" No se ha podido modificar correctamente");
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await jugadorService.Eliminar(Jugador.JugadorId);
        if (eliminado)
        {
            toastService.ShowSuccess(" Se ha eliminado correctamente");
            navigationManager.NavigateTo("/Jugador/Index");
        }
        else
        {
            toastService.ShowError(" No se ha podido eliminar correctamente");
        }
    }
}
